const express = require('express');
const router = express.Router();
const Room = require('../models/Room');
const roomController = require('../controllers/roomController');
const { asyncHandler } = require('../utils'); 

// POST endpoint for creating a new room
router.post('/api/v1/rooms', asyncHandler(async (req, res) => {
  const { name, roomType, price } = req.body;
  if (!name || !roomType || !price) {
    return res.status(400).json({ message: 'Name, roomType, and price are required' });
  }
  
  const newRoom = new Room({ name, roomType, price });
  await newRoom.save();
  res.status(201).json({ message: 'Room created successfully', data: newRoom });
}));

// GET endpoint for fetching all rooms with filters
router.get('/api/v1/rooms', asyncHandler(async (req, res) => {
  let query = {};
  if (req.query.search) {
    query.name = { $regex: req.query.search, $options: 'i' };
  }
  if (req.query.roomType) {
    query.roomType = req.query.roomType;
  }
  if (req.query.minPrice) {
    query.price = { $gte: req.query.minPrice };
  }
  if (req.query.maxPrice) {
    if (!query.price) query.price = {};
    query.price.$lte = req.query.maxPrice;
  }

  const rooms = await Room.find(query);
  res.status(200).json({ data: rooms });
}));

// Router GET method for getting a room by id 
router.get('/api/v1/rooms/:id', asyncHandler(async (req, res) => {
  const room = await Room.findById(req.params.id);
  if (!room) {
    return res.status(404).json({ message: 'Room not found' });
  }
  res.status(200).json({ data: room });
}));

// Router PATCH method for updating a room 
router.patch('/api/v1/rooms/:id', asyncHandler(async (req, res) => {
  const { name, roomType, price } = req.body;
  if (!name || !roomType || !price) {
    return res.status(400).json({ message: 'Name, roomType, and price are required' });
  }
  
  const updatedRoom = await Room.findByIdAndUpdate(req.params.id, { name, roomType, price }, { new: true });
  if (!updatedRoom) {
    return res.status(404).json({ message: 'Room not found' });
  }
  res.status(200).json({ message: 'Room updated successfully', data: updatedRoom });
}));

// Router DELETE method for deleting a room
router.delete('/api/v1/rooms/:id', asyncHandler(async (req, res) => {
  const deletedRoom = await Room.findByIdAndDelete(req.params.id);
  if (!deletedRoom) {
    return res.status(404).json({ message: 'Room not found' });
  }
  res.status(200).json({ message: 'Room deleted successfully', data: deletedRoom });
}));

module.exports = router;
